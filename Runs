Place to store our results:
- Put the loss, accuracy and variable values so we can compare which makes our model more accurate.
------------------------------------------
Test loss: 0.78452807970047
Test accuracy: 0.7341

batch_size = 32
num_classes = 100 #10
epochs = 100
data_augmentation = True
num_predictions = 100 #20
------------------------------------------
Test loss: 0.6946866035461425
Test accuracy: 0.7742

batch_size = 32
num_classes = 10
epochs = 100
data_augmentation = True
num_predictions = 20

opt = keras.optimizers.RMSprop(lr=0.00001, decay=1e-6)
------------------------------------------
Test loss: 1.9985703918457032
Test accuracy: 0.2005

batch_size = 32
num_classes = 10
epochs = 100
data_augmentation = True
num_predictions = 20

opt = keras.optimizers.RMSprop(lr=0.001, decay=1e-6)
------------------------------------------
Test loss: 0.7599619619369506
Test accuracy: 0.7418

model = Sequential()
model.add(Conv2D(16, (3, 3), padding='same',     
                 input_shape=x_train.shape[1:]))
model.add(Conv2D(16, (3, 3)))
model.add(Conv2D(16, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Conv2D(32, (3, 3), padding='same'))
model.add(Conv2D(32, (3, 3)))
model.add(Conv2D(32, (3, 3)))    
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Conv2D(48, (3, 3), padding='same'))
model.add(Conv2D(48, (3, 3)))
model.add(Conv2D(64, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(1,1)))
model.add(Dropout(0.25))

model.add(Flatten())
model.add(Dense(512))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(num_classes))
model.add(Activation('softmax'))

-------------------------------------

batch_size = 32
num_classes = 100 #previously 32
epochs = 25 #previously 100
data_augmentation = True
num_predictions = 100 #previously 20
save_dir = os.path.join(os.getcwd(), 'saved_models')
model_name = 'keras_cifar10_trained_model.h5'

# The data, split between train and test sets:
(x_train, y_train), (x_test, y_test) = cifar10.load_data()
print('x_train shape:', x_train.shape)
print(x_train.shape[0], 'train samples')
print(x_test.shape[0], 'test samples')

# Convert class vectors to binary class matrices.
y_train = keras.utils.to_categorical(y_train, num_classes)
y_test = keras.utils.to_categorical(y_test, num_classes)

model = Sequential()
model.add(Conv2D(64, (5, 5), padding='same',
                 input_shape=x_train.shape[1:])) #previously 32 3,3
model.add(Activation('relu'))
model.add(Conv2D(64, (5, 5))) #previously 32 3,3
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Conv2D(128, (5, 5), padding='same')) #previously 48 3,3
model.add(Activation('relu'))
model.add(Conv2D(256, (5, 5))) #previously 62 3,3
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Flatten())
model.add(Dense(512))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(num_classes))
model.add(Activation('softmax'))

Test loss: 0.5682922131538392
Test accuracy: 0.8285
